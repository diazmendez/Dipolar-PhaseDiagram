%!PS-Adobe-2.0
%%Title: e.32.T0.T1.2.c.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri May 15 19:06:28 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Times-Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1710 900 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 900 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.56)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 1320 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 1320 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.54)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 1740 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 1740 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.52)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 2160 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 2160 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 2580 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 2580 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.48)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 3000 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 3000 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.46)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 3420 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 3420 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.44)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 3840 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 3840 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.42)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 4260 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 4260 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.4)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1710 4680 M
63 0 V
4917 0 R
-63 0 V
stroke
1530 4680 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (-2.38)]
] -100.0 MRshow
grestore
1.000 UL
LTb
2163 900 M
0 63 V
0 3717 R
0 -63 V
stroke
2163 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 0.6)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3068 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3068 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 0.8)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3974 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3974 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 1)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4879 900 M
0 63 V
0 3717 R
0 -63 V
stroke
4879 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 1.2)]
] -100.0 MCshow
grestore
1.000 UL
LTb
5785 900 M
0 63 V
0 3717 R
0 -63 V
stroke
5785 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 1.4)]
] -100.0 MCshow
grestore
1.000 UL
LTb
6690 900 M
0 63 V
0 3717 R
0 -63 V
stroke
6690 600 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 ( 1.6)]
] -100.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1710 900 M
4980 0 V
0 3780 V
-4980 0 V
0 -3780 V
LTb
300 2790 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times-Roman) 300.0 0.0 true true 0 (energy)]
] -100.0 MCshow
grestore
grestore
LTb
4200 150 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (H)]
] -100.0 MCshow
grestore
1.000 UP
LTb
1801 1110 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (h2)]
] -100.0 MLshow
grestore
LTb
3068 1110 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (h2322)]
] -100.0 MLshow
grestore
LTb
6011 1110 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (h3-2)]
] -100.0 MLshow
grestore
LTb
2615 1740 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (a\))]
] -100.0 MLshow
grestore
1.000 UL
LT0
2163 900 M
0 3780 V
1.000 UL
LT0
5694 900 M
0 3780 V
1.000 UL
LT0
3387 4017 M
0 600 V
3123 0 V
0 -600 V
-3123 0 V
0 600 R
3123 0 V
1.000 UL
LT0
LTb
3387 4467 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (T=0 config.)]
] -100.0 MLshow
grestore
LT0
5547 4467 M
783 0 V
1710 3904 M
181 0 V
272 0 V
271 -115 V
272 -157 V
272 -158 V
271 -157 V
272 -158 V
272 -157 V
271 -158 V
272 -157 V
271 -158 V
272 -157 V
272 -158 V
271 -157 V
272 -158 V
272 -211 V
271 -315 V
272 -315 V
6645 900 L
1.000 UP
1.000 UL
LT1
LTb
3387 4167 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (T=1.2 sim.)]
] -100.0 MLshow
grestore
LT1
5547 4167 M
783 0 V
1710 4130 M
181 31 V
272 47 V
271 65 V
272 91 V
272 91 V
271 103 V
272 -991 V
272 -148 V
271 -120 V
272 -106 V
271 -102 V
272 -116 V
272 -58 V
271 -78 V
272 -329 V
272 -440 V
271 -389 V
272 -359 V
181 -234 V
1891 4161 Circle
2163 4208 Circle
2434 4273 Circle
2706 4364 Circle
2978 4455 Circle
3249 4558 Circle
3521 3567 Circle
3793 3419 Circle
4064 3299 Circle
4336 3193 Circle
4607 3091 Circle
4879 2975 Circle
5151 2917 Circle
5422 2839 Circle
5694 2510 Circle
5966 2070 Circle
6237 1681 Circle
6509 1322 Circle
5938 4167 Circle
1.000 UL
LTb
1710 900 M
4980 0 V
0 3780 V
-4980 0 V
0 -3780 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times-Roman
%%Pages: 1

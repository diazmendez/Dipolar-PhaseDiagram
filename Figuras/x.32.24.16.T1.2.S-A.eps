%!PS-Adobe-2.0
%%Title: x.32.24.16.T1.2.S-A.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Feb 12 10:52:51 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Times-Roman) findfont 200 scalefont setfont
1.000 UL
LTb
1500 600 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 600 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 1300 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 1300 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 5e-05)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 2000 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 2000 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.0001)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 2700 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 2700 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.00015)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 3400 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 3400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.0002)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 4100 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 4100 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.00025)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 4800 M
63 0 V
5297 0 R
-63 0 V
stroke
1380 4800 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.0003)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1500 600 M
0 63 V
0 4137 R
0 -63 V
stroke
1500 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.3)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2170 600 M
0 63 V
0 4137 R
0 -63 V
stroke
2170 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.4)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2840 600 M
0 63 V
0 4137 R
0 -63 V
stroke
2840 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.5)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3510 600 M
0 63 V
0 4137 R
0 -63 V
stroke
3510 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.6)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4180 600 M
0 63 V
0 4137 R
0 -63 V
stroke
4180 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.7)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4850 600 M
0 63 V
0 4137 R
0 -63 V
stroke
4850 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.8)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5520 600 M
0 63 V
0 4137 R
0 -63 V
stroke
5520 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 0.9)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6190 600 M
0 63 V
0 4137 R
0 -63 V
stroke
6190 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 1)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6860 600 M
0 63 V
0 4137 R
0 -63 V
stroke
6860 400 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 ( 1.1)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1500 600 M
5360 0 V
0 4200 V
-5360 0 V
0 -4200 V
LTb
200 2700 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Symbol) 200.0 0.0 true true 0 (c)]
] -66.7 MCshow
grestore
grestore
LTb
4180 100 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 (H)]
] -66.7 MCshow
grestore
1.000 UP
LTb
2170 3050 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 (T=1.2)]
] -66.7 MLshow
grestore
1.000 UL
LT0
3557 4137 M
0 600 V
3183 0 V
0 -600 V
-3183 0 V
0 600 R
3183 0 V
1.500 UP
1.000 UL
LT1
LTb
3557 4637 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 (L=16 \()]
[(Symbol) 200.0 0.0 true true 0 (c)]
[(Times-Roman) 200.0 0.0 true true 0 (/3\))]
] -66.7 MLshow
grestore
LT1
6077 4637 M
543 0 V
1500 819 M
402 83 V
402 168 V
402 207 V
402 334 V
402 358 V
402 517 V
402 785 V
402 1411 V
50 118 V
547 0 R
207 -883 V
402 -487 V
402 -602 V
402 -646 V
134 -118 V
1902 902 Circle
2304 1070 Circle
2706 1277 Circle
3108 1611 Circle
3510 1969 Circle
3912 2486 Circle
4314 3271 Circle
4716 4682 Circle
5520 3917 Circle
5922 3430 Circle
6324 2828 Circle
6726 2182 Circle
6348 4637 Circle
1.500 UP
1.000 UL
LT0
LTb
3557 4437 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 (L=24)]
] -66.7 MLshow
grestore
LT0
6077 4437 M
543 0 V
1500 812 M
402 55 V
402 158 V
402 158 V
402 227 V
402 392 V
402 411 V
402 632 V
402 -961 V
402 -270 V
402 -194 V
402 -150 V
402 -44 V
402 14 V
134 10 V
1902 867 CircleF
2304 1025 CircleF
2706 1183 CircleF
3108 1410 CircleF
3510 1802 CircleF
3912 2213 CircleF
4314 2845 CircleF
4716 1884 CircleF
5118 1614 CircleF
5520 1420 CircleF
5922 1270 CircleF
6324 1226 CircleF
6726 1240 CircleF
6348 4437 CircleF
1.500 UP
1.000 UL
LT0
LTb
3557 4237 M
gsave 0 setgray
[ [(Times-Roman) 200.0 0.0 true true 0 (L=32)]
] -66.7 MLshow
grestore
LT0
6077 4237 M
543 0 V
1500 709 M
402 34 V
402 62 V
402 89 V
402 125 V
402 157 V
402 202 V
402 381 V
402 331 V
402 390 V
5520 1028 L
402 46 V
402 125 V
402 232 V
134 128 V
1902 743 TriUF
2304 805 TriUF
2706 894 TriUF
3108 1019 TriUF
3510 1176 TriUF
3912 1378 TriUF
4314 1759 TriUF
4716 2090 TriUF
5118 2480 TriUF
5520 1028 TriUF
5922 1074 TriUF
6324 1199 TriUF
6726 1431 TriUF
6348 4237 TriUF
1.000 UL
LTb
1500 600 M
5360 0 V
0 4200 V
-5360 0 V
0 -4200 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Times-Roman
%%Pages: 1

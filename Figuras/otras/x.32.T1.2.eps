%!PS-Adobe-2.0
%%Title: x.32.T1.2.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Jan  1 10:10:15 1988
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -80 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Times-Roman) findfont 240 scalefont setfont
1.000 UL
LTb
1656 720 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 720 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 1296 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 1296 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0002)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 1872 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 1872 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0004)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 2448 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 2448 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0006)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 3024 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 3024 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0008)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 3600 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 3600 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.001)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 4176 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 4176 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0012)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 4752 M
63 0 V
5073 0 R
-63 0 V
stroke
1512 4752 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0.0014)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 720 M
0 63 V
0 3969 R
0 -63 V
stroke
1656 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 0)]
] -80.0 MCshow
grestore
1.000 UL
LTb
2512 720 M
0 63 V
0 3969 R
0 -63 V
stroke
2512 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 1)]
] -80.0 MCshow
grestore
1.000 UL
LTb
3368 720 M
0 63 V
0 3969 R
0 -63 V
stroke
3368 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 2)]
] -80.0 MCshow
grestore
1.000 UL
LTb
4224 720 M
0 63 V
0 3969 R
0 -63 V
stroke
4224 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 3)]
] -80.0 MCshow
grestore
1.000 UL
LTb
5080 720 M
0 63 V
0 3969 R
0 -63 V
stroke
5080 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 4)]
] -80.0 MCshow
grestore
1.000 UL
LTb
5936 720 M
0 63 V
0 3969 R
0 -63 V
stroke
5936 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 5)]
] -80.0 MCshow
grestore
1.000 UL
LTb
6792 720 M
0 63 V
0 3969 R
0 -63 V
stroke
6792 480 M
gsave 0 setgray
[ [(Times-Roman) 240.0 0.0 true true 0 ( 6)]
] -80.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1656 720 M
5136 0 V
0 4032 V
-5136 0 V
0 -4032 V
LTb
240 2736 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Symbol) 300.0 0.0 true true 0 (c)]
] -100.0 MCshow
grestore
grestore
LTb
4224 120 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (H)]
] -100.0 MCshow
grestore
1.000 UP
LTb
5936 4176 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (T=1.2)]
] -100.0 MLshow
grestore
LTb
2084 3024 M
gsave 0 setgray
[ [(Times-Roman) 300.0 0.0 true true 0 (b\))]
] -100.0 MLshow
grestore
1.500 UP
1.000 UL
LT0
1656 728 M
51 1 V
52 1 V
51 3 V
51 3 V
52 6 V
51 7 V
52 13 V
51 18 V
51 26 V
52 33 V
51 41 V
51 78 V
52 69 V
51 80 V
51 -299 V
52 9 V
51 26 V
51 48 V
52 79 V
51 78 V
52 156 V
51 3006 V
51 -3158 V
52 -148 V
51 -25 V
51 -42 V
52 -8 V
51 -9 V
51 7 V
52 25 V
51 34 V
52 39 V
51 83 V
51 93 V
52 78 V
51 167 V
51 159 V
52 16 V
51 181 V
51 219 V
52 -327 V
51 -124 V
51 -67 V
52 -47 V
51 11 V
52 -49 V
51 0 V
51 -15 V
52 -14 V
51 9 V
51 6 V
52 -19 V
51 0 V
51 7 V
52 -8 V
51 0 V
52 -1 V
51 9 V
51 5 V
52 -2 V
51 25 V
51 -10 V
52 -4 V
51 1 V
51 6 V
52 12 V
51 -1 V
51 7 V
52 11 V
51 -1 V
52 3 V
51 2 V
51 14 V
52 -1 V
51 26 V
51 -13 V
52 0 V
51 -6 V
51 6 V
52 -11 V
51 -40 V
52 -8 V
51 -50 V
51 -59 V
52 -58 V
51 -65 V
51 -68 V
52 -63 V
51 -53 V
51 -50 V
52 -35 V
51 -22 V
51 -20 V
52 -14 V
51 -9 V
52 -7 V
51 -5 V
51 -3 V
52 -2 V
1656 728 Circle
1707 729 Circle
1759 730 Circle
1810 733 Circle
1861 736 Circle
1913 742 Circle
1964 749 Circle
2016 762 Circle
2067 780 Circle
2118 806 Circle
2170 839 Circle
2221 880 Circle
2272 958 Circle
2324 1027 Circle
2375 1107 Circle
2426 808 Circle
2478 817 Circle
2529 843 Circle
2580 891 Circle
2632 970 Circle
2683 1048 Circle
2735 1204 Circle
2786 4210 Circle
2837 1052 Circle
2889 904 Circle
2940 879 Circle
2991 837 Circle
3043 829 Circle
3094 820 Circle
3145 827 Circle
3197 852 Circle
3248 886 Circle
3300 925 Circle
3351 1008 Circle
3402 1101 Circle
3454 1179 Circle
3505 1346 Circle
3556 1505 Circle
3608 1521 Circle
3659 1702 Circle
3710 1921 Circle
3762 1594 Circle
3813 1470 Circle
3864 1403 Circle
3916 1356 Circle
3967 1367 Circle
4019 1318 Circle
4070 1318 Circle
4121 1303 Circle
4173 1289 Circle
4224 1298 Circle
4275 1304 Circle
4327 1285 Circle
4378 1285 Circle
4429 1292 Circle
4481 1284 Circle
4532 1284 Circle
4584 1283 Circle
4635 1292 Circle
4686 1297 Circle
4738 1295 Circle
4789 1320 Circle
4840 1310 Circle
4892 1306 Circle
4943 1307 Circle
4994 1313 Circle
5046 1325 Circle
5097 1324 Circle
5148 1331 Circle
5200 1342 Circle
5251 1341 Circle
5303 1344 Circle
5354 1346 Circle
5405 1360 Circle
5457 1359 Circle
5508 1385 Circle
5559 1372 Circle
5611 1372 Circle
5662 1366 Circle
5713 1372 Circle
5765 1361 Circle
5816 1321 Circle
5868 1313 Circle
5919 1263 Circle
5970 1204 Circle
6022 1146 Circle
6073 1081 Circle
6124 1013 Circle
6176 950 Circle
6227 897 Circle
6278 847 Circle
6330 812 Circle
6381 790 Circle
6432 770 Circle
6484 756 Circle
6535 747 Circle
6587 740 Circle
6638 735 Circle
6689 732 Circle
6741 730 Circle
1.000 UL
LTb
1656 720 M
5136 0 V
0 4032 V
-5136 0 V
0 -4032 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Times-Roman
%%Pages: 1
